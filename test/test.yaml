---
# Source: cert-manager/charts/job/templates/imageSecret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: registrysecret
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6IHsiaHR0cHM6Ly94ZGMtazhzLmRvY2tlci5yZXBvc2l0b3JpZXMuc2FwLm9uZGVtYW5kLmNvbS8iOiB7ImF1dGgiOiAiSlNGektEeHVhV3crS1RvbElYTW9QRzVwYkQ0cCJ9fX0=

---
# Source: cert-manager/charts/cainjector/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mitko-cainjector
  namespace: "default"
  labels:
    app: cainjector
    chart: cainjector-v0.7.0
    release: mitko
    heritage: Tiller

---
# Source: cert-manager/charts/webhook/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mitko-webhook
  namespace: "default"
  labels:
    app: webhook
    chart: webhook-v0.7.0
    release: mitko
    heritage: Tiller

---
# Source: cert-manager/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mitko-cert-manager
  namespace: "default"
  labels:
    app: cert-manager
    chart: cert-manager-v0.7.0
    release: mitko
    heritage: Tiller
---
# Source: cert-manager/charts/cainjector/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: mitko-cainjector
  labels:
    app: cainjector
    chart: cainjector-v0.7.0
    release: mitko
    heritage: Tiller
rules:
  - apiGroups: ["certmanager.k8s.io"]
    resources: ["certificates"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["configmaps", "events"]
    verbs: ["*"]
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["validatingwebhookconfigurations", "mutatingwebhookconfigurations"]
    verbs: ["*"]
  - apiGroups: ["apiregistration.k8s.io"]
    resources: ["apiservices"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: mitko-cainjector
  labels:
    app: cainjector
    chart: cainjector-v0.7.0
    release: mitko
    heritage: Tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mitko-cainjector
subjects:
  - name: mitko-cainjector
    namespace: "default"
    kind: ServiceAccount
---
# Source: cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: mitko-cert-manager
  labels:
    app: cert-manager
    chart: cert-manager-v0.7.0
    release: mitko
    heritage: Tiller
rules:
  - apiGroups: ["certmanager.k8s.io"]
    resources: ["certificates", "certificates/finalizers", "issuers", "clusterissuers", "orders", "orders/finalizers", "challenges"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["configmaps", "secrets", "events", "services", "pods"]
    verbs: ["*"]
  - apiGroups: ["extensions"]
    resources: ["ingresses"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: mitko-cert-manager
  labels:
    app: cert-manager
    chart: cert-manager-v0.7.0
    release: mitko
    heritage: Tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mitko-cert-manager
subjects:
  - name: mitko-cert-manager
    namespace: "default"
    kind: ServiceAccount
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mitko-cert-manager-view
  labels:
    app: cert-manager
    chart: cert-manager-v0.7.0
    release: mitko
    heritage: Tiller
    rbac.authorization.k8s.io/aggregate-to-view: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
  - apiGroups: ["certmanager.k8s.io"]
    resources: ["certificates", "issuers"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mitko-cert-manager-edit
  labels:
    app: cert-manager
    chart: cert-manager-v0.7.0
    release: mitko
    heritage: Tiller
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
  - apiGroups: ["certmanager.k8s.io"]
    resources: ["certificates", "issuers"]
    verbs: ["create", "delete", "deletecollection", "patch", "update"]
---
# Source: cert-manager/charts/job/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: kube-lego
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: default
    namespace: default

---
# Source: cert-manager/charts/webhook/templates/rbac.yaml
### Webhook ###
---
# apiserver gets the auth-delegator role to delegate auth decisions to
# the core apiserver
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: mitko-webhook:auth-delegator
  labels:
    app: webhook
    chart: webhook-v0.7.0
    release: mitko
    heritage: Tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: mitko-webhook
  namespace: default

---

# apiserver gets the ability to read authentication. This allows it to
# read the specific configmap that has the requestheader-* entries to
# api agg
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: mitko-webhook:webhook-authentication-reader
  namespace: kube-system
  labels:
    app: webhook
    chart: webhook-v0.7.0
    release: mitko
    heritage: Tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: mitko-webhook
  namespace: default

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mitko-webhook:webhook-requester
  labels:
    app: webhook
    chart: webhook-v0.7.0
    release: mitko
    heritage: Tiller
rules:
- apiGroups:
  - admission.certmanager.k8s.io
  resources:
  - certificates
  - issuers
  - clusterissuers
  verbs:
  - create
---
# Source: cert-manager/charts/webhook/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mitko-webhook
  namespace: "default"
  labels:
    app: webhook
    chart: webhook-v0.7.0
    release: mitko
    heritage: Tiller
spec:
  type: ClusterIP
  ports:
  - name: https
    port: 443
    targetPort: 6443
  selector:
    app: webhook
    release: mitko

---
# Source: cert-manager/charts/cainjector/templates/deployment.yaml
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: mitko-cainjector
  namespace: "default"
  labels:
    app: cainjector
    chart: cainjector-v0.7.0
    release: mitko
    heritage: Tiller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cainjector
      release: mitko
  template:
    metadata:
      labels:
        app: cainjector
        release: mitko
      annotations:
    spec:
      serviceAccountName: mitko-cainjector
      containers:
        - name: cainjector
          image: "quay.io/jetstack/cert-manager-cainjector:v0.7.0"
          imagePullPolicy: IfNotPresent
          args:
          - --leader-election-namespace=$(POD_NAMESPACE)
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            {}
            

---
# Source: cert-manager/charts/webhook/templates/deployment.yaml
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: mitko-webhook
  namespace: "default"
  labels:
    app: webhook
    chart: webhook-v0.7.0
    release: mitko
    heritage: Tiller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webhook
      release: mitko
  template:
    metadata:
      labels:
        app: webhook
        release: mitko
      annotations:
    spec:
      serviceAccountName: mitko-webhook
      containers:
        - name: webhook
          image: "quay.io/jetstack/cert-manager-webhook:v0.7.0"
          imagePullPolicy: IfNotPresent
          args:
          - --v=12
          - --secure-port=6443
          - --tls-cert-file=/certs/tls.crt
          - --tls-private-key-file=/certs/tls.key
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            {}
            
          volumeMounts:
          - name: certs
            mountPath: /certs
      volumes:
      - name: certs
        secret:
          secretName: mitko-webhook-webhook-tls

---
# Source: cert-manager/templates/deployment.yaml
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: mitko-cert-manager
  namespace: "default"
  labels:
    app: cert-manager
    chart: cert-manager-v0.7.0
    release: mitko
    heritage: Tiller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cert-manager
      release: mitko
  template:
    metadata:
      labels:
        app: cert-manager
        release: mitko
      annotations:
        prometheus.io/path: "/metrics"
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9402'
    spec:
      serviceAccountName: mitko-cert-manager
      containers:
        - name: cert-manager
          image: "quay.io/jetstack/cert-manager-controller:v0.7.0"
          imagePullPolicy: IfNotPresent
          args:
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=$(POD_NAMESPACE)
          ports:
          - containerPort: 9402
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            {}
            

---
# Source: cert-manager/charts/job/templates/pre-install.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "mitko"
  labels:
    app.kubernetes.io/managed-by: "Tiller"
    app.kubernetes.io/instance: "mitko"
    helm.sh/chart: "job-0.1.0"
spec:
  template:
    metadata:
      name: "mitko"
      labels:
        app.kubernetes.io/managed-by: "Tiller"
        app.kubernetes.io/instance: "mitko"
        helm.sh/chart: "job-0.1.0"
    spec:
      restartPolicy: Never
      containers:
      - name: pre-install-job
        image: "xdc-k8s.docker.repositories.sap.ondemand.com/toolset-image-cd:latest"
        command: ["/bin/bash"]
        args: ["-c", "kubectl apply -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.6/deploy/manifests/00-crds.yaml;kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true"]
      imagePullSecrets:
        - name: registrysecret

---
# Source: cert-manager/charts/webhook/templates/apiservice.yaml
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v1beta1.admission.certmanager.k8s.io
  labels:
    app: webhook
    chart: webhook-v0.7.0
    release: mitko
    heritage: Tiller
  annotations:
    certmanager.k8s.io/inject-ca-from: "default/mitko-webhook-webhook-tls"
spec:
  group: admission.certmanager.k8s.io
  groupPriorityMinimum: 1000
  versionPriority: 15
  service:
    name: mitko-webhook
    namespace: "default"
  version: v1beta1

---
# Source: cert-manager/charts/webhook/templates/pki.yaml
---
# Create a selfsigned Issuer, in order to create a root CA certificate for
# signing webhook serving certificates
apiVersion: certmanager.k8s.io/v1alpha1
kind: Issuer
metadata:
  name: mitko-webhook-selfsign
  namespace: "default"
  labels:
    app: webhook
    chart: webhook-v0.7.0
    release: mitko
    heritage: Tiller
spec:
  selfSigned: {}

---

# Generate a CA Certificate used to sign certificates for the webhook
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: mitko-webhook-ca
  namespace: "default"
  labels:
    app: webhook
    chart: webhook-v0.7.0
    release: mitko
    heritage: Tiller
spec:
  secretName: mitko-webhook-ca
  duration: 43800h # 5y
  issuerRef:
    name: mitko-webhook-selfsign
  commonName: "ca.webhook.cert-manager"
  isCA: true

---

# Create an Issuer that uses the above generated CA certificate to issue certs
apiVersion: certmanager.k8s.io/v1alpha1
kind: Issuer
metadata:
  name: mitko-webhook-ca
  namespace: "default"
  labels:
    app: webhook
    chart: webhook-v0.7.0
    release: mitko
    heritage: Tiller
spec:
  ca:
    secretName: mitko-webhook-ca

---

# Finally, generate a serving certificate for the webhook to use
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: mitko-webhook-webhook-tls
  namespace: "default"
  labels:
    app: webhook
    chart: webhook-v0.7.0
    release: mitko
    heritage: Tiller
spec:
  secretName: mitko-webhook-webhook-tls
  duration: 8760h # 1y
  issuerRef:
    name: mitko-webhook-ca
  dnsNames:
  - mitko-webhook
  - mitko-webhook.default
  - mitko-webhook.default.svc

---
# Source: cert-manager/charts/webhook/templates/validating-webhook.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: mitko-webhook
  labels:
    app: webhook
    chart: webhook-v0.7.0
    release: mitko
    heritage: Tiller
  annotations:
    certmanager.k8s.io/inject-apiserver-ca: "true"
webhooks:
  - name: certificates.admission.certmanager.k8s.io
    namespaceSelector:
      matchExpressions:
      - key: "certmanager.k8s.io/disable-validation"
        operator: "NotIn"
        values:
        - "true"
      - key: "name"
        operator: "NotIn"
        values:
        - default
    rules:
      - apiGroups:
          - "certmanager.k8s.io"
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - certificates
    failurePolicy: Fail
    clientConfig:
      service:
        name: kubernetes
        namespace: default
        path: /apis/admission.certmanager.k8s.io/v1beta1/certificates
  - name: issuers.admission.certmanager.k8s.io
    namespaceSelector:
      matchExpressions:
      - key: "certmanager.k8s.io/disable-validation"
        operator: "NotIn"
        values:
        - "true"
      - key: "name"
        operator: "NotIn"
        values:
        - default
    rules:
      - apiGroups:
          - "certmanager.k8s.io"
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - issuers
    failurePolicy: Fail
    clientConfig:
      service:
        name: kubernetes
        namespace: default
        path: /apis/admission.certmanager.k8s.io/v1beta1/issuers
  - name: clusterissuers.admission.certmanager.k8s.io
    namespaceSelector:
      matchExpressions:
      - key: "certmanager.k8s.io/disable-validation"
        operator: "NotIn"
        values:
        - "true"
      - key: "name"
        operator: "NotIn"
        values:
        - default
    rules:
      - apiGroups:
          - "certmanager.k8s.io"
        apiVersions:
          - v1alpha1
        operations:
          - CREATE
          - UPDATE
        resources:
          - clusterissuers
    failurePolicy: Fail
    clientConfig:
      service:
        name: kubernetes
        namespace: default
        path: /apis/admission.certmanager.k8s.io/v1beta1/clusterissuers

